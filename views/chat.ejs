<!doctype html>
<html>

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
    integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">

  <title>채팅방</title>

  <!-- CSS 파일 첨부 / CSS 파일은 public 폴더 안에 저장하여 관리함  -->
  <link rel="stylesheet" href="/public/main.css">

  <!-- [ HTML 문법^^ ] chat.ejs 전용 CSS 파일을 추가로 첨부함 -->
  <link rel="stylesheet" href="/public/chat.css">

  <!-- [ JQuery 문법^^ ] <head> 태그 내에 게시물(즉, 메시지) 전송에 JQuery 사용한다고 명시 -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
</head>

<body>

  <!-- [ EJS 문법 ] (본 EJS 파일위치 기준으로 상대경로) nav.html을 첨부해 주세요 -->
  <%- include('nav.html') %>

    <!-- [ 부트스트랩 문법 ] class명으로 container 부여시 내용물을 가운데 정렬해줌-->
    <div class="container mt-4">

      <!-- [ 부트스트랩 문법 ] class명으로 text-center 부여시 글자 태그를 가운데 정렬해줌-->
      <h4 class="text-center">채팅방</h4>

      <div class="container p-4 detail">

        <div class="row">

          <!-- <div class="col-3"> -->
          <ul class="chat-list list-group">

            <!-- [ Mongo DB & EJS & Javascript 문법^^ ] for문 으로 내가 속한 모든 채티방 목록을 보여주기 -->
            <!-- [ Mongo DB & EJS & Javascript 문법^^ ] member[0] 은 채팅당한사람id -->
            <% for(let i=0; i < myChatroomList.length; i++) { %>

              <!-- [ JQuery 문법^^ ] 채팅방 목록 내의 각 채팅방에 입장하는 순간 parent 항목에 채팅방 _id 값을 저장하기 위해 class="chatroom-item" 부여하여 어느 채팅방을 클릭하든지 클릭 이벤트 감지되도록 사전 설정함 -->
              <!-- [ JQuery 문법^^ ] 채팅방을 클릭하여 입장하는 순간 parent 항목에 채팅방 _id 값을 저장하기 위해 채팅방 목록 내의 각 채팅방마다 data-li_tag_parent_id="<%= myChatroomList[i]._id %> 코드로 채팅방 _id 꼬리표 달아놓기  -->

              <!-- ★★★ ???? 뿌려주는 아이디값이 개설자(즉, 상대방에 최초로 문자보내서 채팅방 열리게 한 사람) 기준??? 아니면 본인이 아닌 무조건 상대의 아이디값???? -->
              <li class="chatroom-item list-group-item" data-li_tag_parent_id="<%= myChatroomList[i]._id %>">
                <h6>
                  <%= myChatroomList[i].title %>
                </h6>
                <h6 class="text-small">
                  <%= myChatroomList[i].member[0] %>
                </h6>
              </li>

              <% } %>

          </ul>
          <!-- </div> -->

          <div class="col-9 p-0">
            <div class="chatroom-main">
              <!-- <div class="chat-room"> -->
              <!-- <ul class="chat-content list-group"> -->
              <ul class="chat-content">
                <li><span class="chat-box">채팅방1111111111 내용</span></li>
                <li><span class="chat-box mine">채팅방22222222222222 내용</span></li>
              </ul>

              <div class="input-group">
                <!-- [ HTML 문법^^ ] 메시지 입력용 input 태그 만들고 이를 특정하기 위해 id="chat-input" 부여 -->
                <input class="form-control" id="chat-input">

                <!-- [ HTML 문법^^ ] 전송 버튼 만들고 이를 특정하기 위해 id="send" 부여 -->
                <!-- [ JQuery 문법^^ ] 전송 버튼 클릭하면 서버로 게시물(즉, 메시지) 전송 -->
                <button class="btn btn-secondary" id="send">전송</button>
              </div>

            </div>
          </div>
        </div>

      </div>
    </div>

    <!-- [ JQuery 문법^^ ] <head> 태그 내에 게시물(즉, 메시지) 전송에 JQuery 사용한다고 명시 -->
    <!-- [ JQuery 문법^^ ] 전송 버튼 클릭하면 최소정보송신용꾸러미(즉, 송신하려는메시지 와 지금누른채팅방id) 를 서버로 전송함 -->
    <script>
      // [ Javascript 문법^^ ] 함수 내에서 만든 변수는 함수 밖에서 사용 불가이므로 변수 선언을 함수 밖에서 하는 것도 하나의 기법

      let eventSource;
      let 지금누른채팅방id;

      // [ JQuery 문법^^ 방법A ] 지금누른채팅방에 대해 .css('background-color', '#eee') 속성을 적용시켜줌
      // ♬♬♬♬♬♬♬♬♬♬♬♬♬ 
      // ★★★★★★★★ 심각한 코드 허점: 로그인한 사용자가 참여중인 채팅방 클릭한 횟수만큼 메시지 중복전송됨
      // ★★★★★★★★ 
      // ★★★★★★★★ 
      // ★★★★★★★★ 

      $('.chatroom-item').click(function () {

        $(this).css('background-color', '#eee');

        // [ Javascript 문법^^ ] 본 코드 내에서 this 는 지금 클릭 이벤트가 동작하는 곳인 특정한 chatroom-item 를 뜻함 / e.target 과 유사 (상세내용 확인요)
        // [ Javascript 문법^^ ] 함수 내에서 만든 변수는 함수 밖에서 사용 불가이므로 변수 선언을 함수 밖에서 하는 것도 하나의 기법
        // 지금누른채팅방id = this.dataset.li_tag_parent_id;

        // [ JQuery 문법^^ 방법B ] 채팅방을 클릭하여 입장하는 순간 parent 항목에 채팅방 _id 값을 저장하기 위해 for문을 활용해 채팅방 목록 내의 각 채팅방마다 data-li_tag_parent_id 속성을 부여해 채팅방 _id 꼬리표 달아놓기 -->
        지금누른채팅방id = $(this).attr('data-li_tag_parent_id');

        // [ Web API 문법^^ ] ★★★★★ 다른 채팅방 입장하면 브라우저에서 기존 채팅방 내용(즉, class="chat-content" )이 보이지 않도록 지워야 함
        // [ Web API 문법^^ ] 서버발실시간채팅내용.forEach(function(i){표기생략} 코드는 chat-content 내용 채우기 성격이고, $('.chat-content').html(''); 코드는 내용 비우기 성격임
        $('.chat-content').html('');


        // [ Web API 문법^^ ] ★★★★★ 다른 채팅방 입장하면 기존 채팅방과의 소통채널은 종료하도록 SSE 기법 전용함수 eventSource.close() 로 기존 채팅방 소통 종료요
        if (eventSource != undefined) {
          eventSource.close();
          console.log('eventSource.close(); 동작함');
        }

        // // [ Web API 문법^^ 단계03 서버->유저 ] ★★★ SSE(Sever Sent Events) 기법으로 실시간으로 DB 데이터 가져올 때 사용자가 서버로부터 데이터 수신(즉, GET 요청)하기 위한 전용 문법
        // // [ Web API 문법^^ 단계03 서버->유저 ] server.js 의 01단계(유저->서버) 02단계(서버->유저) 데이터전송 이후에 chat.ejs 의 eventSource = new EventSource('/어쩌구'); 코드까지 실행(서버->유저)되면 실시간 소통채널 입장완료
        // // [ Web API 문법^^ 단계03 서버->유저 ] GET 요청임에도 서버로 데이터 전송할 수 있는 방법 2가지는 (1) [채택] URL 파리미터(즉, 통상 :id / 여기서는 :clickedChatroomId) 또는 (2) Query String
        // // [ Web API 문법^^ 단계03 서버->유저 ] chat.ejs 에서 GET 요청으로 eventSource = new EventSource('/message/' + 지금누른채팅방id); 코드 실행하면 server.js 의 라우팅 app.get('/message/:clickedChatroomId', 표기생략) 에 적용된 URL 파리미터 기법을 통해 지금누른채팅방id 값을 받아올 수 있음
        // // 프론트엔드에서 실시간 소통채널 여는법 

        // /* // ♬♬♬♬♬♬♬♬♬♬♬♬♬ 브라우저 콘솔에서 오류나는 지점 ??????????????? 

        // // POST http://localhost:8080/message 404 (Not Found) -------- jquery-3.5.1.min.js:2 

        // // ♬♬♬♬♬♬♬♬♬♬♬♬♬ 브라우저 콘솔에서 오류나는 지점 ??????????????? */

        eventSource = new EventSource('/message/' + 지금누른채팅방id);
        // eventSource = new EventSource('/message');

        console.log('chat.ejs ---- 지금누른채팅방id ---', 지금누른채팅방id);
        console.log('///////////// eventSource /////////////', eventSource)

        eventSource.addEventListener('서버에서작명한메시지보내기이벤트', function (e) {
          console.log(`EJS단 코드 어디까지 들어왔는지 체크용 ////// eventSource.addEventListener('서버에서작명한메시지보내기이벤트', function (e) {}) ///////////`)

          console.log('메시지보내기이벤트 -------- e.data ----', e.data)
          // // [ Web API 문법 & Mongo DB 문법^^ ] 문자 자료형으로만 서버에서 실시간 전송(SSE, Sever Sent Events) 가능하므로 JSON.stringify() 함수로 감싸서 사용자에게 전송된 문자 자료형 데이터들은 JSON.parse() 함수로 따옴표를 제거해서 브라우저단에서 데이터 인식 가능함
          // console.log('메시지보내기이벤트 -------- e.data ---- JSON.parse(e.data) ---', JSON.parse(e.data));

          // [ Web API 문법^^ ] 가져온 메시지 만큼 HTML 로 개별 메시지 표시하기
          // [ Javascript 문법^^ ] .forEach() 적용하면 Array 자료형인 서버발실시간채팅내용 에 들어있는 데이터 갯수 만큼 내부 코드 반복 처리
          // [ Web API 문법^^ ] 서버발실시간채팅내용.forEach(function(i){표기생략} 코드는 chat-content 내용 채우기 성격이고, $('.chat-content').html(); 코드는 내용 비우기 성격임
          let 서버발실시간채팅내용 = JSON.parse(e.data);

          console.log('서버발실시간채팅내용 ---- JSON.parse(e.data)  -----', 서버발실시간채팅내용);

          서버발실시간채팅내용.forEach((i) => {
            // [ CSS ] li 태그 내에 있는 개별 메시지인 class="chat-box" 을 CSS 로 세로 줄바꿈 하고 싶은데 아직 마땅한 기법 찾지 못해서 <br> 태그로 임시 처방함
            // console.log('아이디만--------------------', i.senderid);
            // console.log(user.id, user._id)
            $('.chat-content')
              .append(`<li>
                          <span class="chat-box">
                            ${i.content}
                          </span>
                      </li>`);
          });
        });
      });

      $('#send').click(function () {

        // [ JQuery 문법^^ ] input 태그에 사용자가 입력한 값
        let 송신하려는메시지 = $('#chat-input').val();

        // [ EJS 문법^^ ] EJS 는 브라우저단이고 EJS 에서의 console.log() 는 브라우저(F12) 콘솔에 표시됨 (즉, EJS 에서 POST 요청으로 서버 쪽으로 정보 전달하지 않는 이상)
        console.log('chat.ejs ---- 송신하려는메시지 ---', 송신하려는메시지);

        // [ Javascript 문법^^ ] 프론트엔드단 자바스크립트 코드는 사용자가 위조/변조하기 쉬우므로 최소한의 정보로만 서버에 전송요(즉, 그 정보를 토대로 세부정보들은 서버 내에서 자체 검색 가능)

        let 최소정보송신용꾸러미 = {
          parent: 지금누른채팅방id,
          content: 송신하려는메시지,
        }

        $.post('/message', 최소정보송신용꾸러미).then((값) => {
          console.log('chat.ejs --- 브라우저단 메시지 송신 성공');
          // alert(`브라우저단 메시지 송신 성공 ${값}`);
        })
        // .fail(function () { alert("브라우저단 메시지 송신 실패 error"); })

      });
    </script>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->

    <!-- HTML에서 서버에 DELETE 요청 보내기 위해 JQuery 문법 기반으로 AJAX 요청 코드를 작성해야 함. JQuery Min 버전을 CDN으로 연동해야 하므로 부트스트랩 기본값인 JQuery Slim Min 연동 코드는 주석처리함  -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns"
      crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.min.js" integrity="sha384-+YQ4JLhjyBLPDQt//I+STsc9iw4uQqACwlvpslubQzn4u2UU2UFM80nGisd026JF" crossorigin="anonymous"></script>
    -->
</body>

</html>